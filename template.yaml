AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-base

  Example SAM Template for aws-base projects
  
Parameters:

  StackName:
    Type: String
  AppPrefix:
    Type: String
  AssetVersion:
    Type: String
  EnableSQS:
    Type: String
    AllowedValues: [true, false]
    Default: true
  SourceBucket:
    Type: String
    Default: agb-app-source
  ApiStageName:
    Type: String
    Default: dev

Globals:

  Function:
    Runtime: nodejs12.x
    Timeout: 3
    CodeUri:
      Bucket: !Sub ${SourceBucket}
      Key: !Sub ${StackName}/lambda.zip
  
Resources:

  DocumentUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AppPrefix}-document-update-topic

  DocumentUpdateTopicPolicy:
    # This policy is required to allow S3 to publish to the topic, otherwise we get circular dependencies
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - !Ref DocumentUpdateTopic
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - SNS:Publish
            Effect: Allow
            Resource: !Ref DocumentUpdateTopic
            Principal:  
              Service: s3.amazonaws.com

  DocumentBucket:
    Type: AWS::S3::Bucket
    DependsOn: DocumentUpdateTopic
    Properties: 
      BucketName: !Sub ${AppPrefix}-document-bucket
      NotificationConfiguration:
        TopicConfigurations:
          - Event: 's3:ObjectCreated:*'
            Topic: !Ref DocumentUpdateTopic

  DocumentIndexTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${AppPrefix}-document-index-table-gsi
      BillingMode: PAY_PER_REQUEST
      # ProvisionedThroughput: 
      #   ReadCapacityUnits: 5
      #   WriteCapacityUnits: 5
      StreamSpecification: 
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions: 
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: documentType
          AttributeType: S
        - 
          AttributeName: documentId
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: DocumentType
          KeySchema:
            - AttributeName: documentType
              KeyType: HASH
            - AttributeName: documentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DocumentIndexerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-document-indexer-function
      Handler: index.handleDocumentIndexerFunction
      Environment:
        Variables:
          DOCUMENT_INDEX_TABLE_NAME: !Ref DocumentIndexTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentIndexTable
      Events:
        FileUpdateEvent:
          Type: SNS
          Properties:
            Topic: !Ref DocumentUpdateTopic

  DocumentIndexUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AppPrefix}-document-index-update-topic

  DocumentIndexUpdatePublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-document-index-update-publisher-function
      Handler: index.handleDocumentIndexUpdatePublisherFunction
      Environment:
        Variables:
          DOCUMENT_UPDATE_TOPIC: !Ref DocumentIndexUpdateTopic
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref DocumentIndexTable
            StreamName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DocumentIndexUpdateTopic.TopicName
      Events:
        DatabaseEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DocumentIndexTable.StreamArn
            Enabled: !Ref EnableSQS
            MaximumRetryAttempts: 0
            StartingPosition: TRIM_HORIZON

  RecalculationTriggerSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt RecalculationTriggerQueue.Arn
      FilterPolicy: 
        documentType: [ configuration, scenario, product ]
      Protocol: sqs
      TopicArn: !Ref DocumentIndexUpdateTopic

  RecalculationTriggerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AppPrefix}-recalculation-trigger-queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RecalculationTriggerDLQ.Arn
        maxReceiveCount: 1

  RecalculationTriggerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AppPrefix}-recalculation-trigger-dlq
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 18

  RecalculationTriggerQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref RecalculationTriggerQueue
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - SQS:SendMessage
            Effect: Allow
            Resource: !GetAtt RecalculationTriggerQueue.Arn
            Principal:  
              Service: sns.amazonaws.com # TODO: Could this be more restrictive?

  RecalculationTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-recalculation-trigger-function
      Handler: index.handleRecalculationTriggerFunction
      Environment:
        Variables:
          RECALCULATION_STATE_MACHINE_ARN: !Ref RecalculationStateMachine
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt RecalculationTriggerQueue.QueueName
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RecalculationStateMachine.Name
      Events:
        UnprocessedUpdateEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RecalculationTriggerQueue.Arn
            BatchSize: 10
            Enabled: !Ref EnableSQS

  RecalculationInitialiserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-recalculation-initialiser-function
      Handler: index.handleRecalculationInitialiserFunction
      Environment:
        Variables:
          DOCUMENT_INDEX_TABLE_NAME: !Ref DocumentIndexTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentIndexTable

  RecalculatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-recalculator-function
      Handler: index.handleRecalculatorFunction
      Environment:
        Variables:
          DOCUMENT_INDEX_TABLE_NAME: !Ref DocumentIndexTable
          DOCUMENT_BUCKET: !Ref DocumentBucket
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentIndexTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket

  RecalculationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AppPrefix}-recalculation-state-machine
      # TODO: For express state machines we need to add logging: https://www.davehall.com.au/blog/dave/2020/07/10/logging-step-functions-cloudwatch
      # Type: EXPRESS
      Type: STANDARD
      DefinitionUri:
        Bucket: !Sub ${SourceBucket}
        Key: !Sub ${StackName}/statemachine-${AssetVersion}/recalculation.asl.json
      DefinitionSubstitutions:
        RecalculationInitialiserFunctionArn: !GetAtt RecalculationInitialiserFunction.Arn
        RecalculatorFunctionArn: !GetAtt RecalculatorFunction.Arn
      Policies:
        - AWSLambdaRole

  AffordabilityApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      Name: !Sub ${AppPrefix}-AffordabilityApi
      EndpointConfiguration: REGIONAL
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          # Quota:
          #   Limit: 500
          #   Period: MONTH
          # Throttle:
          #   BurstLimit: 100
          #   RateLimit: 50

  AffordabilityApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-affordability-api-function
      Handler: index.handleAffordabilityApiFunction
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref DocumentBucket
          DOCUMENT_INDEX_TABLE_NAME: !Ref DocumentIndexTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentBucket
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentIndexTable
      Events:
        HttpEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AffordabilityApi
            Method: POST
            Path: /affordability

  DocumentApiUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-document-api-update-function
      Handler: index.handleDocumentApiUpdateFunction
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref DocumentBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref DocumentBucket
      Events:
        InsertEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AffordabilityApi
            Method: POST
            Path: /document/{type}
        UpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AffordabilityApi
            Method: POST
            Path: /document/{type}/{id}

Outputs:

  AffordabilityApi:
    Description: "Affordability API URL"
    Value: !Sub "https://${AffordabilityApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/affordability"

  AffordabilityApiFunctionARN:
    Description: "Affordability API Function ARN"
    Value: !GetAtt AffordabilityApiFunction.Arn
    

